#!/bin/sh
#
# Manage git worktrees with simple start/stop commands

# Color codes and formatting
if [ -t 1 ]; then
  # Colors
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[0;33m'
  BLUE='\033[0;34m'
  MAGENTA='\033[0;35m'
  CYAN='\033[0;36m'
  WHITE='\033[0;37m'

  # Bold colors
  BOLD_RED='\033[1;31m'
  BOLD_GREEN='\033[1;32m'
  BOLD_YELLOW='\033[1;33m'
  BOLD_BLUE='\033[1;34m'
  BOLD_MAGENTA='\033[1;35m'
  BOLD_CYAN='\033[1;36m'
  BOLD_WHITE='\033[1;37m'

  # Background colors
  BG_RED='\033[41m'
  BG_GREEN='\033[42m'
  BG_YELLOW='\033[43m'
  BG_BLUE='\033[44m'
  BG_MAGENTA='\033[45m'
  BG_CYAN='\033[46m'

  # Formatting
  BOLD='\033[1m'
  DIM='\033[2m'
  UNDERLINE='\033[4m'
  REVERSE='\033[7m'

  # Reset
  NC='\033[0m' # No Color
else
  # No colors if not in terminal
  RED='' GREEN='' YELLOW='' BLUE='' MAGENTA='' CYAN='' WHITE=''
  BOLD_RED='' BOLD_GREEN='' BOLD_YELLOW='' BOLD_BLUE='' BOLD_MAGENTA='' BOLD_CYAN='' BOLD_WHITE=''
  BG_RED='' BG_GREEN='' BG_YELLOW='' BG_BLUE='' BG_MAGENTA='' BG_CYAN=''
  BOLD='' DIM='' UNDERLINE='' REVERSE='' NC=''
fi

# Pretty print functions
print_success() {
  printf "${BOLD_GREEN}✓${NC} %s\n" "$1"
}

print_error() {
  printf "${BOLD_RED}✗${NC} %s\n" "$1" >&2
}

print_info() {
  printf "${BOLD_BLUE}ℹ${NC} %s\n" "$1"
}

print_warning() {
  printf "${BOLD_YELLOW}⚠${NC} %s\n" "$1"
}

print_header() {
  printf "\n${BOLD_CYAN}%s${NC}\n" "$1"
  printf "${DIM}%s${NC}\n" "$(printf '%*s' ${#1} '' | tr ' ' '─')"
}

print_branch() {
  printf "${BG_MAGENTA}${WHITE} %s ${NC}" "$1"
}

print_path() {
  printf "${CYAN}%s${NC}" "$1"
}

print_hash() {
  printf "${BG_BLUE}${WHITE} %s ${NC}" "$1"
}

command="$1"

# Get the worktrees directory (one level up from current directory)
worktrees_dir="$(dirname "$PWD")/worktrees"

usage() {
  print_header "Git Worktree Manager"
  printf "${BOLD}Usage:${NC} worktree ${CYAN}<command>${NC} ${DIM}[options] [name]${NC}\n\n"

  printf "${BOLD}Commands:${NC}\n"
  printf "  ${BOLD_GREEN}start${NC} ${CYAN}<name>${NC}                Create a new worktree and branch\n"
  printf "                              ${DIM}Remembers current branch as base for PR${NC}\n"
  printf "  ${BOLD_RED}stop${NC} ${CYAN}<name>${NC}                 Remove an existing worktree\n"
  printf "  ${BOLD_BLUE}submit${NC} ${DIM}[options]${NC}             Create PR and optionally clean up current worktree\n"
  printf "                              ${DIM}--title <title>: PR title (default: use commit messages)${NC}\n"
  printf "                              ${DIM}--base-branch <branch>: target branch (default: remembered base)${NC}\n"
  printf "                              ${DIM}--no-verify: bypass git hooks when pushing${NC}\n"
  printf "                              ${DIM}--no-pr: only push, don't create pull request${NC}\n"
  printf "  ${BOLD_YELLOW}list${NC}, ${BOLD_YELLOW}ls${NC}                    Show all existing worktrees\n"
  exit 1
}

ensure_worktrees_dir() {
  if [ ! -d "$worktrees_dir" ]; then
    print_info "Creating worktrees directory: $(print_path "$worktrees_dir")"
    mkdir -p "$worktrees_dir"
  fi
}

worktree_exists() {
  git worktree list | grep -q "$worktrees_dir/$name"
}

branch_exists() {
  git show-ref --verify --quiet "refs/heads/$name"
}

start_worktree() {
  name="$1"
  if [ -z "$name" ]; then
    print_error "Worktree name is required"
    usage
  fi

  if worktree_exists; then
    print_error "Worktree '$(print_branch "$name")' already exists"
    exit 1
  fi

  # Remember the current branch as the base branch for this worktree
  current_base_branch="$(get_current_branch)"
  if [ -z "$current_base_branch" ]; then
    current_base_branch="main"
  fi

  ensure_worktrees_dir

  print_header "Creating Worktree"
  printf "Creating worktree $(print_branch "$name") in $(print_path "$worktrees_dir/$name")\n"
  printf "Base branch: $(print_branch "$current_base_branch")\n"

  # Create worktree with new branch
  if branch_exists; then
    print_info "Branch '$(print_branch "$name")' already exists, creating worktree from existing branch"
    git worktree add "$worktrees_dir/$name" "$name"
  else
    print_info "Creating new branch '$(print_branch "$name")' and worktree"
    git worktree add -b "$name" "$worktrees_dir/$name"
  fi

  if [ $? -eq 0 ]; then
    # Store the base branch for this worktree
    git config "worktree.$name.base" "$current_base_branch"
    print_success "Worktree created successfully"
    printf "Changing directory to: $(print_path "$worktrees_dir/$name")\n"
    cd "$worktrees_dir/$name"
    # Start a new shell in the worktree directory
    exec "$SHELL"
  else
    print_error "Failed to create worktree"
    exit 1
  fi
}

stop_worktree() {
  name="$1"
  if [ -z "$name" ]; then
    print_error "Worktree name is required"
    usage
  fi

  if ! worktree_exists; then
    print_error "Worktree '$(print_branch "$name")' does not exist"
    exit 1
  fi

  print_header "Removing Worktree"
  printf "Removing worktree $(print_branch "$name")\n"
  git worktree remove "$worktrees_dir/$name"

  if [ $? -eq 0 ]; then
    # Clean up stored base branch config
    git config --unset "worktree.$name.base" 2>/dev/null
    print_success "Worktree '$(print_branch "$name")' removed successfully"
  else
    print_error "Failed to remove worktree"
    exit 1
  fi
}

list_worktrees() {
  print_header "Git Worktrees"

  # Enhanced worktree list with colors
  git worktree list | while IFS= read -r line; do
    # Parse the line to extract path, hash, and branch
    path=$(echo "$line" | awk '{print $1}')
    hash=$(echo "$line" | awk '{print $2}')
    branch=$(echo "$line" | sed 's/.*\[\(.*\)\]/\1/')

    if echo "$line" | grep -q "\["; then
      printf "$(print_path "$path") $(print_hash "$hash") $(print_branch "$branch")\n"
    else
      printf "$(print_path "$path") $(print_hash "$hash")\n"
    fi
  done

  print_header "Remembered Base Branches"
  # Get all worktree configs
  if git config --get-regexp "^worktree\." >/dev/null 2>&1; then
    git config --get-regexp "^worktree\." | while read -r key value; do
      # Extract worktree name from key like "worktree.feature-auth.base"
      worktree_name=$(echo "$key" | sed 's/worktree\.\(.*\)\.base/\1/')
      printf "  $(print_branch "$worktree_name") ${DIM}→${NC} $(print_branch "$value")\n"
    done
  else
    printf "${DIM}  No remembered base branches${NC}\n"
  fi
}

get_current_branch() {
  git branch --show-current
}

is_in_worktree() {
  current_dir="$(pwd)"
  # Check if current directory is in worktrees directory
  echo "$current_dir" | grep -q "/worktrees/"
}

get_main_repo_dir() {
  # Go up until we find the main repo (the one that contains .git directory, not .git file)
  current="$(pwd)"
  while [ "$current" != "/" ]; do
    if [ -d "$current/.git" ] && [ ! -f "$current/.git" ]; then
      echo "$current"
      return
    fi
    current="$(dirname "$current")"
  done

  # Fallback: try to get it from git worktree list
  git worktree list | head -1 | awk '{print $1}'
}

get_stored_base_branch() {
  branch_name="$1"
  main_repo="$(get_main_repo_dir)"

  # Change to main repo to read config
  if [ -n "$main_repo" ] && [ -d "$main_repo" ]; then
    (cd "$main_repo" && git config --get "worktree.$branch_name.base" 2>/dev/null)
  else
    # Try from current location
    git config --get "worktree.$branch_name.base" 2>/dev/null
  fi
}

submit_worktree() {
  # Parse arguments
  pr_title=""
  base_branch=""
  base_branch_specified=false
  no_verify=false
  no_pr=false

  while [ $# -gt 0 ]; do
    case "$1" in
      --title)
        if [ -n "$2" ]; then
          pr_title="$2"
          shift 2
        else
          print_error "--title requires a value"
          exit 1
        fi
        ;;
      --base-branch)
        if [ -n "$2" ]; then
          base_branch="$2"
          base_branch_specified=true
          shift 2
        else
          print_error "--base-branch requires a value"
          exit 1
        fi
        ;;
      --no-verify)
        no_verify=true
        shift
        ;;
      --no-pr)
        no_pr=true
        shift
        ;;
      *)
        print_error "Unknown argument: $1"
        usage
        ;;
    esac
  done

  if ! is_in_worktree; then
    print_error "This command should be run from within a worktree"
    printf "${DIM}Current directory doesn't appear to be a worktree${NC}\n"
    exit 1
  fi

  current_branch="$(get_current_branch)"
  if [ -z "$current_branch" ]; then
    print_error "Could not determine current branch"
    exit 1
  fi

  # If base branch not specified, try to get stored base branch
  if [ "$base_branch_specified" = false ]; then
    stored_base="$(get_stored_base_branch "$current_branch")"
    if [ -n "$stored_base" ]; then
      base_branch="$stored_base"
      print_info "Using remembered base branch: $(print_branch "$base_branch")"
    else
      base_branch="main"
      print_warning "No remembered base branch, defaulting to: $(print_branch "$base_branch")"
    fi
  fi

    if [ "$no_pr" = true ]; then
    print_header "Pushing Changes"
    printf "Current branch: $(print_branch "$current_branch")\n"
    if [ "$no_verify" = true ]; then
      print_warning "Bypassing git hooks (--no-verify)"
    fi
  else
    print_header "Creating Pull Request"
    printf "Current branch: $(print_branch "$current_branch")\n"
    printf "Base branch: $(print_branch "$base_branch")\n"
    if [ -n "$pr_title" ]; then
      printf "PR title: ${BOLD_WHITE}$pr_title${NC}\n"
    fi
    if [ "$no_verify" = true ]; then
      print_warning "Bypassing git hooks (--no-verify)"
    fi
  fi

  print_info "Pushing branch to origin..."

  # Build git push command
  push_cmd="git push -u origin $current_branch"
  if [ "$no_verify" = true ]; then
    push_cmd="$push_cmd --no-verify"
  fi

  # Push the current branch to origin
  if ! eval "$push_cmd"; then
    print_error "Failed to push branch to origin"
    exit 1
  fi

  # Skip PR creation if --no-pr flag is set
  if [ "$no_pr" = true ]; then
    print_success "Branch pushed successfully!"
    print_info "You can create a pull request manually when ready"

    printf "\n${BOLD_YELLOW}Do you want to remove this worktree?${NC} ${DIM}(y/N)${NC} "
    read -r response

    if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
      main_repo="$(get_main_repo_dir)"
      current_worktree="$(pwd)"
      worktree_name="$(basename "$current_worktree")"

      print_header "Cleaning Up"
      printf "Changing to main repository: $(print_path "$main_repo")\n"
      cd "$main_repo" || exit 1

      printf "Removing worktree: $(print_branch "$worktree_name")\n"
      git worktree remove "$current_worktree"

      if [ $? -eq 0 ]; then
        # Clean up stored base branch config
        git config --unset "worktree.$current_branch.base" 2>/dev/null
        print_success "Worktree removed successfully!"
        print_info "You are now in the main repository"
        # Start a new shell in the main repo
        exec "$SHELL"
      else
        print_error "Failed to remove worktree"
        exit 1
      fi
    else
      print_info "Worktree kept. You can remove it later with: ${BOLD}worktree stop $(print_branch "$current_branch")${NC}"
    fi
    return
  fi

  # GitHub CLI is required for PR creation
  if ! command -v gh >/dev/null 2>&1; then
    print_error "GitHub CLI (gh) is not installed"
    printf "${DIM}Please install it from: https://cli.github.com/${NC}\n"
    printf "${DIM}Or use --no-pr flag to skip PR creation${NC}\n"
    exit 1
  fi

  print_info "Creating pull request..."

  # Build gh pr create command
  gh_cmd="gh pr create --base $base_branch --head $current_branch"

  if [ -n "$pr_title" ]; then
    gh_cmd="$gh_cmd --title \"$pr_title\" --body \"\""
  else
    gh_cmd="$gh_cmd --fill"
  fi

  # Create PR using GitHub CLI
  if eval "$gh_cmd"; then
    print_success "Pull request created successfully!"

    printf "\n${BOLD_YELLOW}Do you want to remove this worktree?${NC} ${DIM}(y/N)${NC} "
    read -r response

    if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
      main_repo="$(get_main_repo_dir)"
      current_worktree="$(pwd)"
      worktree_name="$(basename "$current_worktree")"

      print_header "Cleaning Up"
      printf "Changing to main repository: $(print_path "$main_repo")\n"
      cd "$main_repo" || exit 1

      printf "Removing worktree: $(print_branch "$worktree_name")\n"
      git worktree remove "$current_worktree"

      if [ $? -eq 0 ]; then
        # Clean up stored base branch config
        git config --unset "worktree.$current_branch.base" 2>/dev/null
        print_success "Worktree removed successfully!"
        print_info "You are now in the main repository"
        # Start a new shell in the main repo
        exec "$SHELL"
      else
        print_error "Failed to remove worktree"
        exit 1
      fi
    else
      print_info "Worktree kept. You can remove it later with: ${BOLD}worktree stop $(print_branch "$current_branch")${NC}"
    fi
  else
    print_error "Failed to create pull request"
    exit 1
  fi
}

# Main logic
case "$command" in
  start)
    start_worktree "$2"
    ;;
  stop)
    stop_worktree "$2"
    ;;
  submit)
    # Pass all arguments except the first one (which is 'submit')
    shift
    submit_worktree "$@"
    ;;
  list|ls)
    list_worktrees
    ;;
  *)
    usage
    ;;
esac